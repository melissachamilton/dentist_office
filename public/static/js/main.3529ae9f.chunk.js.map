{"version":3,"sources":["components/LandingPage.js","components/SingleUser.js","App.js","serviceWorker.js","index.js"],"names":["LandingPage","Component","SingleUser","state","user","appointments","fetchUsers","_callee","id","response","regenerator_default","a","wrap","_context","prev","next","axios","get","concat","sent","console","log","data","abrupt","stop","this","fetchAppointments","_callee2","_context2","userId","props","match","params","setState","username","map","i","react_default","createElement","key","date","first_name","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAGqBA,wIAAoBC,qCCCpBC,6MACnBC,MAAQ,CACNC,KAAM,GACNC,aAAc,MAYhBC,iDAAa,SAAAC,EAAOC,GAAP,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYC,IAAMC,IAAN,cAAAC,OAAwBV,IADpC,cACLC,EADKI,EAAAM,KAETC,QAAQC,IAAIZ,EAASa,MAFZT,EAAAU,OAAA,SAGJd,EAASa,MAHL,wBAAAT,EAAAW,SAAAjB,EAAAkB,iEAMbC,wDAAoB,SAAAC,EAAOnB,GAAP,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAb,KAAA,EACKC,IAAMC,IAAN,cAAAC,OAAwBV,EAAxB,kBADL,cACZC,EADYmB,EAAAT,KAAAS,EAAAL,OAAA,SAEXd,EAASa,MAFE,wBAAAM,EAAAJ,SAAAG,EAAAF,2QAdZI,EAASJ,KAAKK,MAAMC,MAAMC,OAAOxB,YACpBiB,KAAKnB,WAAWuB,iBAA7BzB,kBACqBqB,KAAKC,kBAAkBG,UAA5CxB,SAENoB,KAAKQ,SAAS,CAAE7B,OAAMC,oJAgBtB,IAAM6B,EAAWT,KAAKtB,MAAMC,KAY5B,OAXqBqB,KAAKtB,MAAME,aAAa8B,IAAI,SAAC9B,EAAc+B,GAE9D,OACEC,EAAA1B,EAAA2B,cAAA,OAAKC,IAAKH,GACXC,EAAA1B,EAAA2B,cAAA,eAAOjC,EAAamC,MACnBpB,QAAQC,IAAKhB,EAAamC,MAC3BH,EAAA1B,EAAA2B,cAAA,WAAMJ,EAASO,sBAlCkBxC,aCczByC,mLAXX,OACEL,EAAA1B,EAAA2B,cAACK,EAAA,EAAD,KACEN,EAAA1B,EAAA2B,cAACM,EAAA,EAAD,KACEP,EAAA1B,EAAA2B,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhD,IACjCqC,EAAA1B,EAAA2B,cAACO,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAW9C,aANlCD,aCOEgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DCZNsB,IAASC,OAAOjB,EAAA1B,EAAA2B,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3529ae9f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport axios from 'axios'\n\nexport default class LandingPage extends Component {\n\n  \"tester\"\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\n\n\nexport default class SingleUser extends Component {\n  state = {\n    user: {},\n    appointments: []\n  }\n\n  async componentDidMount() {\n    const userId = this.props.match.params.id\n    const user = await this.fetchUsers(userId)\n    const appointments = await this.fetchAppointments(userId)\n\n    this.setState({ user, appointments })\n\n  }\n\n  fetchUsers = async (id) => {\n    const response = await axios.get(`/api/users/${id}`)\n    { console.log(response.data) }\n    return response.data\n\n  }\n  fetchAppointments = async (id) => {\n    const response = await axios.get(`/api/users/${id}/appointments`)\n    return response.data\n  }\n\n  render() {\n    const username = this.state.user\n    const appointments = this.state.appointments.map((appointments, i) => {\n\n      return (\n        <div key={i}>\n       <div> {appointments.date}</div>\n       {console.log (appointments.date)}\n       <div>{username.first_name}</div>\n        </div>\n      )\n})\n      \n    return (\n\n      appointments \n    )\n  }\n}","import React, { Component } from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport LandingPage from './components/LandingPage';\nimport SingleUser from './components/SingleUser';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={LandingPage} />\n          <Route exact path=\"/users/:id\" component={SingleUser} />\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}